AWSTemplateFormatVersion: '2010-09-09'
Description: Create an AMI for Launch Configuration. (qs-1nqqf5ko6)
Parameters:
  EC2InstanceId:
    Description: EC2 Instance-Id from which the AMI will be created.
    Type: String
  AMIBaseName:
    Description: AMI base-name. AMI Base Name will be appended with random numbers
      to avoid name conflicts. E.g. AMIBaseName-12345
    Type: String
  ARNPartition:
    Description: ARN Partition Key. E.g. aws or aws-us-gov.
    Type: String
Resources:
  AMICloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
  CreateAMIFunctionExecuteRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: CreateAMIFunctionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:'
                    - !Ref 'ARNPartition'
                    - ':logs:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - :*
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:'
                    - !Ref 'ARNPartition'
                    - ':logs:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':log-group:'
                    - !Ref 'AMICloudWatchLogGroup'
                    - :*
              - Effect: Allow
                Action:
                  - ec2:Describe*
                  - ec2:StopInstances
                  - ec2:CreateImage
                  - ec2:DeregisterImage
                Resource: '*'
  CreateAMIFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Create an AMI from  EC2 Instance and return AMI-ID.
      Handler: index.lambda_handler
      Runtime: python3.7
      Timeout: '300'
      Role: !GetAtt 'CreateAMIFunctionExecuteRole.Arn'
      Code:
        ZipFile: !Join
          - "\n"
          - - import json
            - import cfnresponse
            - import boto3
            - from random import randint
            - 'def lambda_handler(event, context):'
            - '  if event[''RequestType''] == ''Delete'':'
            - '    cfnresponse.send(event, context, cfnresponse.SUCCESS, {})'
            - '    return'
            - '  try:'
            - '    ec2 = boto3.resource(''ec2'')'
            - '    instance = ec2.Instance(event[''ResourceProperties''][''InstanceId''])'
            - '    instance.stop()'
            - '    instance.wait_until_stopped()'
            - '    image = instance.create_image(Name="%s-%i" % (event[''ResourceProperties''][''AMIName''],
              randint(0,100000)), Description="Created with Cloudformation")'
            - '    boto3.client(''ec2'').get_waiter(''image_available'').wait(ImageIds=[image.id])'
            - '    responseData = {''ami'':image.id}'
            - '    cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)'
            - '  except Exception as inst:'
            - '    print(inst)'
            - '    cfnresponse.send(event, context, cfnresponse.FAILED, {})'
  CreateAMI:
    Type: Custom::CreateAMI
    DeletionPolicy: Retain
    Properties:
      ServiceToken: !GetAtt 'CreateAMIFunction.Arn'
      InstanceId: !Ref 'EC2InstanceId'
      AMIName: !Ref 'AMIBaseName'
      Version: 1
  CleanUpAMIFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Runtime: python3.7
      Timeout: '300'
      Role: !GetAtt 'CreateAMIFunctionExecuteRole.Arn'
      Code:
        ZipFile: !Join
          - "\n"
          - - import json
            - import cfnresponse
            - import boto3
            - from random import randint
            - 'def lambda_handler(event, context):'
            - '  if event[''RequestType''] == ''Delete'':'
            - '    try:'
            - '      ec2 = boto3.resource(''ec2'')'
            - '      image = ec2.Image(event[''ResourceProperties''][''AMIId''])'
            - '      image.deregister()'
            - '      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})'
            - '    except Exception as inst:'
            - '      print(inst)'
            - '      cfnresponse.send(event, context, cfnresponse.FAILED, {})'
            - '  else:'
            - '    cfnresponse.send(event, context, cfnresponse.SUCCESS, {})'
  CleanUpAMI:
    Type: Custom::CleanUpAMI
    Properties:
      ServiceToken: !GetAtt 'CleanUpAMIFunction.Arn'
      AMIId: !GetAtt 'CreateAMI.ami'
      Version: 1
Outputs:
  AMIId:
    Description: AMI ID of  Image
    Value: !GetAtt 'CreateAMI.ami'
